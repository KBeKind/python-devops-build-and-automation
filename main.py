# pip TO INSTALL MODULES/PACKAGES
# pip PULLS FROM https:pypi.org/ YOU CAN LOOK AT THIS WEBSITE TO GET MORE INFORMATION ABOUT PACKAGES

# pip list COMMAND WILL LIST ALL OF THE PACKAGES INSTALLED ON YOUR SYSTEM
# FOR PYTHON3 IT WILL BE pip3 list

# USING A MODULE AFTER INSTALLED WITH PIP: import moduleName
# SIMILAR TO CREATING AND USING YOUR OWN MODULES



# from moduleName import ModuleItem
# THEN CAN USE THE ModuleItem WITHOUT THE DOT NOTATION BEHIND THE moduleName

# import camelcase
# c = camelcase.CamelCase()

# text = "hello my name is klee whatup"

# print(c.hump(text))



#----------------------------

# TESTING: MANUAL TESTING VS AUTOMATED TESTING

# MANUAL TESTING IS TESTING IN WHICH TEST CASES ARE EXECUTED MANUALLY BY A TESTER
# THE PURPOSE OF MANUAL TESTING IS TO IDENTIFY BUGS, ISSUES, AND DEFECTS
# MANUAL SOFTWARE TESTING IS THE MOST PRIMITIVE TESTING TECHNIQUE

# BLACK BOX TESTING: NO SOURCE CODE ACCESS
# WHITE BOX TESTING: SOURCE CODE ACCESS
# UNIT TESTING: TESTING A SPECIFIC UNIT OF CODE (FUNCTION, CLASS, ETC.)
# INTEGRATION TESTING: TESTING COMBINATION OF UNITS - MIGHT REQUIRE ACTING LIKE A CONSUMER OR USER
# SYSTEM TESTING: TESTING A COMPLETE SYSTEM
# ACCEPTANCE TESTING: TESTING TO ENSURE SOFTWARE MEETS SPECIFICATION


# MOCKING: CREATING A FAKE VERSION OF AN EXTERNAL OR INTERNAL SERVICE
# STUBBING: CREATING A STAND THAT ONLY MOCKS THE BEHAVIOR NOT THE ENTIRE OBJECT LIKE MOCKING

# TEST EXECUTION: WHEN SOURCE CODE IS CHECKING INTO A REPOSITORY, UNIT AND INTEGRATION TESTS SHOULD BE RAN TO ENSURE NO BREAKING
# GITHUB ACTIONS IS A GOOD WAY TO DO THIS



# WRITING UNIT TESTS

# assertEqual()
# assertTrue()
# assertFalse()
# assertRaises()
# assertIn()

# import unittest
# def add(x, y):
#     return x + y

# class MyTest(unittest.TestCase):
#     def test_add(self):
#         self.assertEqual(add(2, 3), 5)


# if __name__ == '__main__':
#     unittest.main(verbosity=2)

